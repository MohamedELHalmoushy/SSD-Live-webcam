# Gaussian Filter for noise reduction
def denoise_image(image):
    return cv2.GaussianBlur(image, (5, 5), 0)
# Canny function for edge detection
def edge_detection(image):
    return cv2.Canny(image, 100, 200)
# Fourier function
def apply_fourier_transform(frame):
    f = np.fft.fft2(frame)
    fshift = np.fft.fftshift(f)
    rows, cols = frame.shape
    crow, ccol = rows // 2, cols // 2
    # eliminate low frequencies 
    fshift[crow-30:crow+30, ccol-30:ccol+30] = 0
    f_ishift = np.fft.ifftshift(fshift)
    img_back = np.fft.ifft2(f_ishift)
    img_back = np.abs(img_back)
    return np.uint8(img_back)
def morphological_processing(image):
    kernel = np.ones((5, 5), np.uint8)
    dilated_image = cv2.dilate(image, kernel, iterations=1)
    return dilated_image
# Function to run object detection
def detect_objects(frame):
    input_tensor = tf.convert_to_tensor(np.array(frame))
    input_tensor = input_tensor[tf.newaxis, ...]

    detections = model(input_tensor)

    bboxes = detections["detection_boxes"][0].numpy()  # Bounding boxes
    class_ids = detections["detection_classes"][0].numpy().astype(int)  # Class IDs
    scores = detections["detection_scores"][0].numpy()  # Confidence scores

    return bboxes, class_ids, scores
